<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>架构 on Distributed</title>
    <link>http://localhost:1313/www6vDistributed/categories/%E6%9E%B6%E6%9E%84/</link>
    <description>Recent content in 架构 on Distributed</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 06 Jul 2023 10:13:28 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/www6vDistributed/categories/%E6%9E%B6%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DDD-落地实战 Practice</title>
      <link>http://localhost:1313/www6vDistributed/docs/%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/dddPractice/</link>
      <pubDate>Thu, 06 Jul 2023 10:13:28 +0000</pubDate>
      <guid>http://localhost:1313/www6vDistributed/docs/%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/dddPractice/</guid>
      <description>目录 # DDD 落地 # 基于DDD应用架构的核心 # 分离业务复杂度和技术复杂度&#xA;设计思路 [4] # 贫血模型&#xA;实现 业务逻辑放到Service中 缺点 [7] 业务逻辑被埋没在存储业务中 贫血模型的缺陷 [21] 无法保护模型对象的完整性和一致性 对象操作的可发现性极差 代码逻辑重复 代码的健壮性差 强依赖底层实现 99%的代码都是基于贫血模型 [21] 数据库思维 贫血模型“简单” 脚本思维 充血模型&#xA;实现 业务逻辑放到领域对象中(实体对象中有实现方法) 开闭原则 保持了对象的封装性，使得领域模型在面临多态、继承等复杂结构时，易于变更 适用场景 类似继承、多态的情况 在软件设计的过程中需要将一些类型或者编码进行转换 更好地表现领域对象之间的关系 “聚合”，也就是在真实世界中那些代表整体与部分的事 比较&#xA;贫血模型比充血模型更加简单易行 贫血模型 不需要 仓库、工厂、缓存，简单粗暴 充血模型需要更强的设计与协作能力 充血模型 需要开发人员有更强的OOA/D能力、分析业务、业务建模与设计能力 要有较强的团队协作能力 贫血模型 所有业务处理过程都交给Service完成 贫血模型更容易应对复杂的业务处理场景 分层 [2] # 用户接口层(Controller层) Application层 Domain层 Infrastructure层 代码分层 [2] # Interface&#xA;assembler(DTO和领域对象的互转) dto facade（粗粒度的调用接口，将用户请求委派给一个或多个应用服务进行处理） Application&#xA;event（pub， sub）（事件处理相关的核心业务逻辑在领域层实现） service（应用服务） Domain</description>
    </item>
    <item>
      <title>OpenAPI 设计</title>
      <link>http://localhost:1313/www6vDistributed/docs/%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/apiDesign/</link>
      <pubDate>Fri, 01 Nov 2019 03:48:07 +0000</pubDate>
      <guid>http://localhost:1313/www6vDistributed/docs/%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/apiDesign/</guid>
      <description>&#xA;一. REST API 设计 规范 # OpenAPI Specification 业界标准&#xA;A Visual Guide to What&amp;rsquo;s New in Swagger 3.0 OpenAPI Specification - Version 3.0.2 Google API Design Guide&#xA;谷歌API设计指南 二. API 设计模式 # RPC ROA(Rest-Oriented Architecture) 通常RESTful风格对API设计者的要求是比较高的，主要的难点在于面向资源设计要求开发者事先做好规划，将后端数据模型与API服务模型相匹配。&#xA;三. 面向资源设计API # 资源模型 资源分类管理 资源关系 ECS TAG功能详解 资源组&#xA;四. 服务容错处理 # 同步请求的Timeout[2] 异步请求方式 错误码 TagResources 错误码 参考: # 云服务OpenAPI的7大挑战，架构师如何应对？ 阿里技术 虚明 超时和重试总结 self </description>
    </item>
    <item>
      <title>应用集成方式</title>
      <link>http://localhost:1313/www6vDistributed/docs/%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/EAI/</link>
      <pubDate>Sat, 07 Apr 2018 10:01:24 +0000</pubDate>
      <guid>http://localhost:1313/www6vDistributed/docs/%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/EAI/</guid>
      <description>目录 # 企业应用之间主要有4种集成方式 # 文件传输 # 文件传输 由各个应用产生文件, 其中包含提供其它应用使用的信息. 特征:　内部数据模式自由(schema free) 优势: 1. 内部细节透明 2. 松耦合 3. 标准文件格式支持,如xml, json等. 劣势: 1. 更新慢, 数据不同步, 数据过时 2. 数据不完整, 数据不完全正确时, 数据不一致问题解决困难.3. 产生大量小文件时, 昂贵且不可靠. 4. 语义不一致 适用于批处理.&#xA;共享数据库 # 共享数据库 把应用的数据存储在一个共享数据库中来集成应用,　并定制数据库模式来处理不同应用的各种需求. 特征:　数据有模式(schema) 优势: 1. 提供模型一致性 2. 通过事务管理数据一致性 3. 共享数据, 避免语义不一致问题. 劣势: 1. 统一的数据库模式难设计. 模式改变,　应用也要改变. 2. 遗留系统很难提供一个可扩展的数据库模式供新的应用使用. 3.　性能瓶颈(单点访问) 4. 数据分布迁移困难. 5.应用和数据库紧耦合. 可作为新老系统的集成和改造的候选方案&#xA;远程调用 # 远程调用 应用公开提供过程, 并能够被远程调用, 应用通过调用这些过程来执行操作并交换数据. 特征:　公开外部接口 优势:　1.</description>
    </item>
    <item>
      <title>领域逻辑和SQL</title>
      <link>http://localhost:1313/www6vDistributed/docs/%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/DomainLogicAndSQL/</link>
      <pubDate>Sat, 17 Mar 2018 10:00:45 +0000</pubDate>
      <guid>http://localhost:1313/www6vDistributed/docs/%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/DomainLogicAndSQL/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>CQRS 简介和案例分析</title>
      <link>http://localhost:1313/www6vDistributed/docs/%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/cqrs/</link>
      <pubDate>Sun, 25 Feb 2018 10:00:12 +0000</pubDate>
      <guid>http://localhost:1313/www6vDistributed/docs/%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/cqrs/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
