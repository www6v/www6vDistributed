<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>性能测试 on Distributed</title>
    <link>https://www6v.github.io/www6vDistributed/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</link>
    <description>Recent content in 性能测试 on Distributed</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 16 Jun 2022 15:37:25 +0000</lastBuildDate>
    <atom:link href="https://www6v.github.io/www6vDistributed/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>性能分析</title>
      <link>https://www6v.github.io/www6vDistributed/docs/%E6%80%A7%E8%83%BD/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/performanceAnalysis/</link>
      <pubDate>Thu, 16 Jun 2022 15:37:25 +0000</pubDate>
      <guid>https://www6v.github.io/www6vDistributed/docs/%E6%80%A7%E8%83%BD/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/performanceAnalysis/</guid>
      <description>&#xA;目录 # 方法 # 性能分析 7步法 [1] # 第一步：压力场景数据。&#xA;第二步：分析架构图。&#xA;第三步：拆分响应时间。&#xA;第四步：全局监控分析。 [3]&#xA;第五步：定向监控分析。 [3]&#xA;第六步：判断性能瓶颈点。&#xA;第七步：确定解决方案。&#xA;性能测试场景 [2] # 基准场景&#xA;容量场景&#xA;稳定性场景&#xA;异常场景&#xA;工具 # Java性能分析 工具 btrace， 慢响应，生产用 排查占cpu最多的线程 JVM 工具 参考 # 《03 | 核心分析逻辑：所有的性能分析，靠这七步都能搞定》 高楼 《10 | 设计基准场景需要注意哪些关键点？ 》 高楼 《15丨性能测试场景：如何进行监控设计？》 *** 高楼 06丨倾囊相授：我毕生所学的性能分析思路都在这里了 高楼 未 </description>
    </item>
    <item>
      <title>性能测试</title>
      <link>https://www6v.github.io/www6vDistributed/docs/%E6%80%A7%E8%83%BD/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/performanceTest/</link>
      <pubDate>Wed, 15 Jun 2022 19:36:37 +0000</pubDate>
      <guid>https://www6v.github.io/www6vDistributed/docs/%E6%80%A7%E8%83%BD/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/performanceTest/</guid>
      <description>TPS和响应时间的关系[1] # 在这个图中，定义了三条曲线、三个区域、两个点以及三个状态描述。&#xA;三条曲线：吞吐量的曲线（紫色）、使用率 / 用户数曲线（绿色）、响应时间曲线（深 蓝色）。 三个区域：轻负载区（Light Load）、重负载区（Heavy Load）、塌陷区（Buckle Zone）。 两个点：最优并发用户数（The Optimum Number of Concurrent Users）、最大并发 用户数（The Maximum Number of Concurrent Users）。 三个状态描述：资源饱和（Resource Saturated）、吞吐下降（Throughput Falling）、用户受影响（End Users Effected）。 性能指标的计算方式 [2] # 公式（1）：&#xA;并发用户数计算的通用公式：C = nL/T&#xA;其中 C 是平均的并发用户数；n 是 login session 的数量；L 是 login session 的平均长 度；T 指考察的时间段长度。&#xA;公式（2）：&#xA;并发用户数峰值：&#xA;C’指并发用户数的峰值，C 就是公式（1）中得到的平均的并发用户数。该公式是假设用 户的 login session 产生符合泊松分布而估算得到的。&#xA;仔细搜索之后发现会发现这两个公式的出处是 2004 年一个叫 Eric Man Wong 的人写的一篇名叫《Method for Estimating the Number of Concurrent Users》的文章。中英文我都反复看到很多篇。同时也会网上看到有些文章中把这个文章描述成“业界公认”的计算方法。</description>
    </item>
  </channel>
</rss>
