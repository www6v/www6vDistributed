<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>总结 on Distributed</title>
    <link>https://www6v.github.io/www6vDistributed/categories/%E6%80%BB%E7%BB%93/</link>
    <description>Recent content in 总结 on Distributed</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 02 Mar 2022 19:19:10 +0000</lastBuildDate>
    <atom:link href="https://www6v.github.io/www6vDistributed/categories/%E6%80%BB%E7%BB%93/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>稳定性总结</title>
      <link>https://www6v.github.io/www6vDistributed/docs/%E7%A8%B3%E5%AE%9A%E6%80%A7/stability/</link>
      <pubDate>Tue, 09 May 2017 22:34:54 +0000</pubDate>
      <guid>https://www6v.github.io/www6vDistributed/docs/%E7%A8%B3%E5%AE%9A%E6%80%A7/stability/</guid>
      <description>&#xA;关键词: 容量规划, 压测, 强弱依赖, 关键词: 故障模型, 故障演练, 故障注入&#xA;稳定性总结 # 参考： # 超全总结 | 阿里如何应对电商故障？神秘演练细节曝光 阿里巴巴-周洋（花名中亭） 故障注入， 故障演练 稳定性思考-强弱依赖 阿里中间件团队博客 稳定性思考-强弱依赖2 阿里中间件团队博客 中间件技术及双十一实践·稳定性平台篇 阿里中间件（Aliware） 强弱依赖， 容量规划 &amp;laquo;尽在双11阿里巴巴技术演进与超越&amp;raquo; </description>
    </item>
    <item>
      <title>系统设计 总结</title>
      <link>https://www6v.github.io/www6vDistributed/docs/%E6%9E%B6%E6%9E%84/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/systemDesign/</link>
      <pubDate>Wed, 02 Mar 2022 19:19:10 +0000</pubDate>
      <guid>https://www6v.github.io/www6vDistributed/docs/%E6%9E%B6%E6%9E%84/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/systemDesign/</guid>
      <description>特点 设计 Feed流 读写比例100:1&#xA;消息必达性要求高 非稳定的账号关系 {% post_link &amp;lsquo;feed&amp;rsquo; %} 秒杀系统 {% post_link &amp;lsquo;secKillSummary&amp;rsquo; %} {% post_link &amp;lsquo;seckill&amp;rsquo; %} 计数系统[2] 数据量巨大&#xA;访问量大，性能要求高&#xA;对于可用性、数字的准确性要求高 + 方案1 数据库 + 缓存 -&amp;gt; 按照 weibo_id做分库分表。数据库和缓存之间无法保证数据的一致性 [2]&#xA;+方案2 全部写入redis -&amp;gt; MQ异步写，批量合并写。redis昂贵， 存储优化，冷热分离 [2] 抢红包系统[3] 交易类信息:红包发、抢、拆、详情列表 展示类信息: 收红包列表、发红包列表 + 架构设计，理论基础是快慢分离。红包入账是一个分布事务，属于慢接口。而拆红包凭证落地则速度快 [3]&#xA;+ 高并发 set化， 局部化-控制同一红包并发个数 排行榜系统 参考 # 计数系统 # 计数系统架构实践一次搞定 | 架构师之路 未&#xA;&amp;laquo;37丨计数系统设计（一）：面对海量数据的计数器要如何做？&amp;raquo; 唐扬&#xA;红包系统 # 揭秘微信红包架构、抢红包算法和高并发和降级方案 微信红包&#xA;揭秘微信红包：架构、抢红包算法、高并发和降级方案&#xA;微信红包后台系统设计 未&#xA;微信高并发资金交易系统设计方案&amp;mdash;&amp;ndash;百亿红包背后的技术支撑&#xA;SET化、请求排队串行化、双维度分库表 未</description>
    </item>
    <item>
      <title>分布式一致性 总结</title>
      <link>https://www6v.github.io/www6vDistributed/docs/%E4%B8%80%E8%87%B4%E6%80%A7/consistent/</link>
      <pubDate>Tue, 09 Feb 2016 18:19:56 +0000</pubDate>
      <guid>https://www6v.github.io/www6vDistributed/docs/%E4%B8%80%E8%87%B4%E6%80%A7/consistent/</guid>
      <description>分布式一致性 # [粉色-Unavailable] 在某些网络故障情况下不可用。为了确保安全，一些或所有节点必须暂停操作。&#xA;[黄色-Sticky Available] 只要客户端只与相同的服务器通信而不切换到新的服务器，就可在每个非故障节点上使用。&#xA;[蓝色-Total Available] 即使网络完全瘫痪，也可在每个非故障节点上使用。&#xA;一致性 # 强一致性模型 # 强一致性 协议 特性 工程 线性一致性[chat] 2PC&#xA;3PC #1 延迟大，吞吐低。全局锁资源 JTA(XA)&#xA;{% post_link &amp;rsquo;transactionSeata&amp;rsquo; Seata XA,AT 非入侵 %} self 顺序一致性[chat] Paxos #1 难理解，延迟大，吞吐中等，全局锁资源 Google Chubby 顺序一致性 {% post_link &amp;lsquo;zookeeperZab&amp;rsquo; Zab %} self&#xA;逻辑时钟 类似多线程程序执行顺序的模型 Zookeeper的读 1.两个主流程，三个阶段 2. Quorum:2f+1个节点，允许f个节点失败 强一致性 {% post_link &amp;lsquo;raft&amp;rsquo; %} self 相对Paxos简单。主从，三个阶段 Go to Page self 逻辑时钟&#xA;Lamport提出逻辑时钟是为了解决分布式系统中的时序问题，即如何定义a在b之前发生. Java中有happen-before 图2. 逻辑时钟 logic-clock&#xA;线性一致性 Linearizability</description>
    </item>
  </channel>
</rss>
