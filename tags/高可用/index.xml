<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>高可用 on Distributed</title>
    <link>https://www6v.github.io/www6vDistributed/tags/%E9%AB%98%E5%8F%AF%E7%94%A8/</link>
    <description>Recent content in 高可用 on Distributed</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 26 Jun 2022 21:55:43 +0000</lastBuildDate>
    <atom:link href="https://www6v.github.io/www6vDistributed/tags/%E9%AB%98%E5%8F%AF%E7%94%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>存算分离-数据应用</title>
      <link>https://www6v.github.io/www6vDistributed/docs/%E6%9E%B6%E6%9E%84/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/disaggregationOfComputeAndStorage/</link>
      <pubDate>Wed, 02 Feb 2022 18:07:53 +0000</pubDate>
      <guid>https://www6v.github.io/www6vDistributed/docs/%E6%9E%B6%E6%9E%84/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/disaggregationOfComputeAndStorage/</guid>
      <description>存算分离 存算一体 RMDB MySQL Cluster MySQL Group Replicatoin(MGR) NewSQL,HTAP TiDB[tidb,tikv] , openGaussDB[2], CockroachDB? Aurora[10], PolarDB[3], PGXC风格[1] 大数据 clickhouse, hbase ES MQ Pulsar kafka, rocketmq 文件系统 Ceph[PG, ODS], PolarFS[5] KV GaussDB(for Redis) [4], Codis redis Cluster 其他 serverless[FasS, BaaS] PolarDB [7] 基于Redo Log物理复制实现的一写多读共享存储集群 参考 # [1] 《04 | 架构风格：NewSQL和PGXC到底有啥不一样？》 王磊&#xA;[2] opengauss系统架构&#xA;[3] PolarDB Serverless: A Cloud Native Database for Disaggregated Data Centers&#xA;[4] GaussDB(for Redis)揭秘：Redis存算分离架构最全解析&#xA;[5] 阿里推出PolarFS分布式文件系统，存储与计算分开！附论文&#xA;[6] Go to Page self</description>
    </item>
    <item>
      <title>高可用 Available</title>
      <link>https://www6v.github.io/www6vDistributed/docs/%E6%9E%B6%E6%9E%84/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/available/</link>
      <pubDate>Sun, 26 Jun 2022 21:55:43 +0000</pubDate>
      <guid>https://www6v.github.io/www6vDistributed/docs/%E6%9E%B6%E6%9E%84/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/available/</guid>
      <description>目录 # 原理 # CAP # CP系统: hbase, zookeeper AP系统: cassandra, eureka&#xA;nPRT公式 [1] # 可以推导出风险期望的公式 # 控制风险的4大因素（nPRT） # 减少风险数量，n 降低风险变故障的概率（即：增加风险变故障的难度），P 减小故障影响范围，R 缩短故障影响时长，T 高可用架构设计的7大核心原则 # 少依赖原则：能不依赖的，尽可能不依赖，越少越好（n） 弱依赖原则：一定要依赖的，尽可能弱依赖，越弱越好（P） 分散原则：鸡蛋不要放一个篮子，分散风险（R） 均衡原则：均匀分散风险，避免不均衡（R） 隔离原则：控制风险不扩散，不放大（R） 无单点原则：要有冗余或其他版本,做到有路可退（T） 自我保护原则：少流血，牺牲一部分，保护另外一部分（P&amp;amp;R&amp;amp;T） 可用性 7 级图表 [成熟度] [5] # 当一个服务挂了的时候&#xA;第一级：Crash with data corruption, destruction. 第二级：Crash with new data loss. 第三级：Crash without data loss. 数据高可用-冗余, destruction 测试 第四级：No crash, but with no or very limited service, low service quality.&#xA;流控系统， eg.</description>
    </item>
  </channel>
</rss>
