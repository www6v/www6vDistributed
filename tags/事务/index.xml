<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>事务 on Distributed</title>
    <link>https://www6v.github.io/www6vDistributed/tags/%E4%BA%8B%E5%8A%A1/</link>
    <description>Recent content in 事务 on Distributed</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Tue, 09 Feb 2016 18:19:56 +0000</lastBuildDate>
    <atom:link href="https://www6v.github.io/www6vDistributed/tags/%E4%BA%8B%E5%8A%A1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>分布式一致性 总结</title>
      <link>https://www6v.github.io/www6vDistributed/docs/%E4%B8%80%E8%87%B4%E6%80%A7/consistent/</link>
      <pubDate>Tue, 09 Feb 2016 18:19:56 +0000</pubDate>
      <guid>https://www6v.github.io/www6vDistributed/docs/%E4%B8%80%E8%87%B4%E6%80%A7/consistent/</guid>
      <description>分布式一致性 # [粉色-Unavailable] 在某些网络故障情况下不可用。为了确保安全，一些或所有节点必须暂停操作。&#xA;[黄色-Sticky Available] 只要客户端只与相同的服务器通信而不切换到新的服务器，就可在每个非故障节点上使用。&#xA;[蓝色-Total Available] 即使网络完全瘫痪，也可在每个非故障节点上使用。&#xA;一致性 # 强一致性模型 # 强一致性 协议 特性 工程 线性一致性[chat] 2PC&#xA;3PC #1 延迟大，吞吐低。全局锁资源 JTA(XA)&#xA;{% post_link &amp;rsquo;transactionSeata&amp;rsquo; Seata XA,AT 非入侵 %} self 顺序一致性[chat] Paxos #1 难理解，延迟大，吞吐中等，全局锁资源 Google Chubby 顺序一致性 {% post_link &amp;lsquo;zookeeperZab&amp;rsquo; Zab %} self&#xA;逻辑时钟 类似多线程程序执行顺序的模型 Zookeeper的读 1.两个主流程，三个阶段 2. Quorum:2f+1个节点，允许f个节点失败 强一致性 {% post_link &amp;lsquo;raft&amp;rsquo; %} self 相对Paxos简单。主从，三个阶段 Go to Page self 逻辑时钟&#xA;Lamport提出逻辑时钟是为了解决分布式系统中的时序问题，即如何定义a在b之前发生. Java中有happen-before 图2. 逻辑时钟 logic-clock&#xA;线性一致性 Linearizability</description>
    </item>
  </channel>
</rss>
